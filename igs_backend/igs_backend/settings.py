"""
Django settings for igs_backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
import environ

env = environ.Env(
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
SITE_URL = env('SITE_URL')
BOOKING_FEE = env('BOOKING_FEE')
PROPERTY_IMAGE_BASE_URL = env('PROPERTY_IMAGE_BASE_URL')
SITE_IP = env('SITE_IP')
APP_BASE = env('APP_BASE')
WEB_HOOK_URL = env('WEB_HOOK_URL')
ZENOPAY_BASE = env('ZENOPAY_BASE')
ACCOUNT_ID = env('ACCOUNT_ID')
ZENOPAY_API_KEY = env('ZENOPAY_API_KEY')
ZENOPAY_SECRET_KEY = env('ZENOPAY_SECRET_KEY')

# Message configuration
MESSAGE_BASE_URL = env('MESSAGE_BASE_URL')
MESSAGE_PASSWORD = env('MESSAGE_PASSWORD')
MESSAGE_USERNAME = env('MESSAGE_USERNAME')
MESSAGE_SINGLE_URL = env('MESSAGE_SINGLE_URL')
MESSAGE_FROM = env('MESSAGE_FROM')
DELIVERY_REPORT_URL = env('DELIVERY_REPORT_URL')
WEB_URL = env('WEB_URL')
MESSAGE_MULTI = env('MESSAGE_MULTI')
MESSAGE_BALANCE = env('MESSAGE_BALANCE')
COUNTRY_CODE = env('COUNTRY_CODE')

LAND_IMAGE_BASE_URL = env('LAND_IMAGE_BASE_URL')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '.seranise.co.tz',
    '127.0.0.1',
]



# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "drf_yasg",
    "rest_framework",
    "django_crontab",
    "sslserver",
    "user",
    "location",
    "house",
    "payment",
    "authentication",
    "account",
    "booking",
    "property",
    "room",
    "message",
    "subscription_plan",
    "property_images",
    "settings",
    "land",
]

# AUTH_USER_MODEL = "authentication.User"
AUTH_USER_MODEL = "user.User"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CRONJOBS = [
    # ('* * * * *', 'booking.cron.my_scheduled_job'),
    ('* * * * *', 'account.cron.expire_account_job'),
    ('* * * * *', 'property.cron.activate_property_job'),
    ('* * * * *', 'property.cron.deactivate_property_job'),
    ('0 */10 * * *', 'payment.cron.delete_pending_payments_job'),
    ('* * * * *', 'account.cron.subscribe_free_account_job'),
    ('0 12 * * *', 'message.cron.check_message_balance_job'),
]

log_directory = BASE_DIR / 'logs'
log_directory.mkdir(parents=True, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '\n\n%(asctime)s %(levelname)s %(name)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler', 
            'filename': log_directory / 'app_logs.log',  
            'maxBytes': 1024*1024*5,  # Max file size (5MB for example)
            'backupCount': 3,  # Keep 3 backup files
            'formatter': 'standard',
        },
        'error_file': {
            'level': 'ERROR', 
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': log_directory / 'app_error.log', 
            'maxBytes': 1024*1024*5,  # Max file size (5MB for example)
            'backupCount': 3,  # Keep 3 backup files
            'formatter': 'standard',
        },
    },
    'loggers': {
        logger_name: {
            'level': 'WARNING',
            'propagate': True,
        } for logger_name in
        ('django', 'django.request', 'django.db.backends', 'igs_backend')
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console', 'file', 'error_file'],
    }
}

ROOT_URLCONF = "igs_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 21
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=2),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ["Bearer"],
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "user_id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

WSGI_APPLICATION = "igs_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': env("ENGINE"),
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = env('STATIC_URL') 
STATIC_ROOT = os.path.join(BASE_DIR, env('STATIC_ROOT'))

MEDIA_URL = env('MEDIA_URL')
MEDIA_ROOT = os.path.join(BASE_DIR, env('MEDIA_ROOT'))

# STATIC_URL = 'https://assets.portal.kedeshlimited.com/static/' 
# STATIC_ROOT = os.path.join(BASE_DIR, '../../assets.portal.kedeshlimited.com/static')

# MEDIA_URL = 'https://assets.portal.kedeshlimited.com/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, '../../assets.portal.kedeshlimited.com/media/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOWED_ORIGINS = [
    "https://rental.seranise.co.tz",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
]

CSRF_TRUSTED_ORIGINS = [
    "https://rental.seranise.co.tz",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
]

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

CORS_ALLOW_CREDENTIALS = True